variables:
  OMP_NUM_THREADS: "1"


before_script:
  - apt-get update -qq && apt-get install -y -qq
  - apt-get install -y -qq make git
  - apt-get install -y -qq libfftw3-dev libblas-dev libpng-dev
  - apt-get install -y -qq gcc liblapacke-dev

stages:
  - build
  - test1
  - test2

Build:
  image: debian:bookworm
  stage: build
  script:
    - make all
  artifacts:
    paths:
      - bart
      - ./lib/
    expire_in: 45 minutes


Build_Clang:
  image: debian:bookworm
  stage: build
  script:
    - apt-get install -y clang-14 libblocksruntime-dev
    - CC=clang-14 OMP=0 make all
  artifacts:
    paths:
      - bart
      - ./lib/
    expire_in: 45 minutes


Build_Static:
  image: debian:bookworm
  stage: build
  script:
    - apt-get install -y libgfortran-12-dev
    - SLINK=1 make
  artifacts:
    paths:
      - bart
    expire_in: 45 minutes


Build_UBSan:
  image: debian:bookworm
  stage: build
  script:
    - UBSAN=1 ASAN=1 make all
  artifacts:
    paths:
      - bart
      - ./lib/
    expire_in: 45 minutes


Build_GPU:
  image: nvidia/cuda:10.2-devel-ubuntu18.04
  stage: build
  script:
    - CUDA=1 CUDA_BASE=/usr/local/cuda CUDA_LIB=lib64 make all
  artifacts:
    paths:
      - bart
      - ./lib/
    expire_in: 45 minutes


Build_LTO:
  image: debian:bookworm
  stage: build
  script:
    - CFLAGS="-flto -O2 -g" make
  artifacts:
    paths:
      - bart
    expire_in: 45 minutes


Build_Analyzer:
  image: debian:bookworm
  stage: build
  script:
    - CFLAGS="-fanalyzer -Werror" make all
  artifacts:
    paths:
      - bart
      - ./lib/
    expire_in: 45 minutes
  allow_failure: true



Build_Tensorflow:
  image: nvidia/cuda:10.2-devel-ubuntu18.04
  stage: build
  script:
    - apt-get install -y wget
    - wget https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.4.0.tar.gz
    - mkdir tensorflow && tar -C tensorflow -xvzf libtensorflow-gpu-linux-x86_64-2.4.0.tar.gz
    - TENSORFLOW=1 TENSORFLOW_BASE=./tensorflow/ CUDA=1 CUDA_BASE=/usr/local/cuda CUDA_LIB=lib64 make
  artifacts:
    paths:
      - bart
      - ./lib/
    expire_in: 45 minutes


Unit_Test:
  image: debian:bookworm
  stage: test1
  script:
    - AUTOCLEAN=0 make utest
  needs: [Build]
  dependencies:
     - Build


Unit_Test_Clang:
  image: debian:bookworm
  stage: test1
  script:
    - apt-get install -y clang-14 libblocksruntime-dev
    - AUTOCLEAN=0 CC=clang-14 OMP=0 make utest
  needs: [Build_Clang]
  dependencies:
     - Build_Clang


Unit_Test_Valgrind:
  image: debian:bookworm
  stage: test1
  script:
    - apt-get install -y valgrind
    - AUTOCLEAN=0 UTESTLEAK=1 make utest
  needs: [Build]
  dependencies:
     - Build


Unit_Test_UBSan:
  image: debian:bookworm
  stage: test1
  script:
    - AUTOCLEAN=0 UBSAN=1 ASAN=1 make utest
  needs: [Build_UBSan]
  dependencies:
     - Build_UBSan


Unit_Test_GPU:
  image: nvidia/cuda:10.2-devel-ubuntu18.04
  stage: test1
  script: |
    if nvidia-smi ; then AUTOCLEAN=0 CUDA=1 CUDA_BASE=/usr/local/cuda CUDA_LIB=lib64 make utest_gpu
    else
      printf "No usable GPU found, skipping GPU tests!\n"
    fi
  needs: [Build_GPU]
  dependencies:
    - Build_GPU


Unit_Test_Tensorflow:
  image: nvidia/cuda:10.2-devel-ubuntu18.04
  stage: test1
  script:
    - apt-get install -y wget
    - wget https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.4.0.tar.gz
    - mkdir tensorflow && tar -C tensorflow -xvzf libtensorflow-gpu-linux-x86_64-2.4.0.tar.gz
    - TENSORFLOW=1 TENSORFLOW_BASE=./tensorflow/ CUDA=1 CUDA_BASE=/usr/local/cuda CUDA_LIB=lib64 make utest
  needs: [Build_Tensorflow]
  dependencies:
    - Build_Tensorflow


Unit_Test_LTO:
  image: debian:bookworm
  stage: test1
  script:
    - CFLAGS="-flto -O2 -g" make utest
  needs: [Build_LTO]
  dependencies:
    - Build_LTO



Integration_Test:
  image: debian:bookworm
  stage: test2
  script:
    - AUTOCLEAN=0 make test testslow
  needs: [Build]
  dependencies:
    - Build


Integration_Test_Python:
  image: debian:bookworm
  stage: test2
  script:
    - apt-get install -y python3 python3-numpy
    - AUTOCLEAN=0 make pythontest
  needs: [Build]
  dependencies:
    - Build
  allow_failure: true


Integration_Test_GPU:
  image: nvidia/cuda:10.2-devel-ubuntu18.04
  stage: test2
  script: |
    if nvidia-smi ; then AUTOCLEAN=0 CUDA=1 CUDA_BASE=/usr/local/cuda CUDA_LIB=lib64 make gputest
    else
      printf "No usable GPU found, skipping GPU tests!\n"
    fi
  needs: [Build_GPU]
  dependencies:
    - Build_GPU


Integration_Test_Clang:
  image: debian:bookworm
  stage: test2
  script:
    - apt-get install -y clang-14 libblocksruntime-dev
    - AUTOCLEAN=0 CC=clang-14 OMP=0 make test
  needs: [Build_Clang]
  dependencies:
    - Build_Clang


Integration_Test_UBSan:
  image: debian:bookworm
  stage: test2
  script:
    - AUTOCLEAN=0 UBSAN=1 ASAN=1 DEBUG=1 UBSAN_OPTIONS=print_stacktrace=1 make test
  needs: [Build_UBSan]
  dependencies:
    - Build_UBSan

#Integration_Test_LTO:
#  image: debian:bookworm
#  stage: test2
#  script:
#    - CFLAGS="-flto -O2 -g" make test
#  needs: [Build_LTO]
#  dependencies:
#    - Build_LTO


